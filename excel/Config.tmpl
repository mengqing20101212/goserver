package config

import (
"bufio"
"encoding/json"
"fmt"
"common/logger"
"os"
"strings"
"path/filepath"
"sync"
)

type {{.FileBaseName}}Config struct {
{{makeJson .}}
//***** 自定义代码区 filed begin ****

//***** 自定义代码区 filed end ****
}

type {{.FileBaseName}}ConfigPtr struct {
configList []*{{.FileBaseName}}Config
configMap  map[int32]*{{.FileBaseName}}Config
}

func (self *{{.FileBaseName}}ConfigPtr) GetConfigList() []*{{.FileBaseName}}Config {
return self.configList
}

func (self *{{.FileBaseName}}ConfigPtr) Get{{.FileBaseName}}Config(id int32) *{{.FileBaseName}}Config {
ptr := self.configMap[id]
if ptr == nil {
logger.SystemLogger.Error(fmt.Sprintf("not found {{.FileBaseName}}Config id:%d", id))
}
return ptr
}
func (self *{{.FileBaseName}}ConfigPtr) Get{{.FileBaseName}}ConfigMap() *map[int32]*{{.FileBaseName}}Config {
return &self.configMap
}
func (self *{{.FileBaseName}}ConfigPtr) setConfigList(cfgList []*{{.FileBaseName}}Config) {
self.configList = cfgList
}

func (self *{{.FileBaseName}}ConfigPtr) setConfigMap(configMap map[int32]*{{.FileBaseName}}Config) {
self.configMap = configMap
}

type {{.FileBaseName}}ConfigSwitch struct {
config1  {{.FileBaseName}}ConfigPtr
config2  {{.FileBaseName}}ConfigPtr
isSwitch bool
lock     sync.RWMutex
}

var {{ToLower .FileBaseName}}ConfigSwitch = {{.FileBaseName}}ConfigSwitch{}

func Load{{.FileBaseName}}Config(fileUrl string) bool {
{{ToLower .FileBaseName}}ConfigSwitch.lock.Lock()
defer {{ToLower .FileBaseName}}ConfigSwitch.lock.Unlock()
fs, err := os.OpenFile(filepath.Join(fileUrl,  "{{.FileBaseNameOld}}.txt"), os.O_RDWR, 0755)
if err != nil {
logger.SystemLogger.Error(fmt.Sprintf("load fileUrl:%s error:%s", fileUrl, err))
return false
}
defer fs.Close()
scanner := bufio.NewScanner(fs)
scanner.Split(func(data []byte, atEOF bool) (advance int, token []byte, err error) {
if i := strings.Index(string(data), "\t\r\n"); i >= 0 {
return i + 3, data[0:i], nil
}
// 如果数据流结束，并且剩余的数据不为空，则将剩余的数据作为一个 token 返回
if atEOF && len(data) > 0 {
return len(data), data, nil
}
// 数据不足以分割一个完整的 token，继续读取更多数据
return 0, nil, nil
})
list := make([]*{{.FileBaseName}}Config, 0)
cfgMap := make(map[int32]*{{.FileBaseName}}Config, 0)
for scanner.Scan() {
line := scanner.Text()
var {{ToLower .FileBaseName}}Config {{.FileBaseName}}Config
err = json.Unmarshal([]byte(line), &{{ToLower .FileBaseName}}Config)
if err != nil {
panic(fmt.Sprintf("load file:%s, line:%s Unmarshal json error:%s", fileUrl, line, err))
}
list = append(list, &{{ToLower .FileBaseName}}Config)
cfgMap[{{ToLower .FileBaseName}}Config.Id] = &{{ToLower .FileBaseName}}Config
}
if {{ToLower .FileBaseName}}ConfigSwitch.isSwitch {
{{ToLower .FileBaseName}}ConfigSwitch.config2.setConfigList(list)
{{ToLower .FileBaseName}}ConfigSwitch.config2.setConfigMap(cfgMap)
{{ToLower .FileBaseName}}ConfigSwitch.afterLoad(&{{ToLower .FileBaseName}}ConfigSwitch.config2)
} else {
{{ToLower .FileBaseName}}ConfigSwitch.config1.setConfigList(list)
{{ToLower .FileBaseName}}ConfigSwitch.config1.setConfigMap(cfgMap)
{{ToLower .FileBaseName}}ConfigSwitch.afterLoad(&{{ToLower .FileBaseName}}ConfigSwitch.config1)
}
{{ToLower .FileBaseName}}ConfigSwitch.isSwitch = !{{ToLower .FileBaseName}}ConfigSwitch.isSwitch
logger.SystemLogger.Info(fmt.Sprintf("load file:%s, success", fs.Name()))
return true
}

func Get{{.FileBaseName}}ConfigPtr() *{{.FileBaseName}}ConfigPtr {
{{ToLower .FileBaseName}}ConfigSwitch.lock.RLock()
defer {{ToLower .FileBaseName}}ConfigSwitch.lock.RUnlock()
if {{ToLower .FileBaseName}}ConfigSwitch.isSwitch {
return &{{ToLower .FileBaseName}}ConfigSwitch.config1
} else {
return &{{ToLower .FileBaseName}}ConfigSwitch.config2
}
}

